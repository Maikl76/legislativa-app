import os
import requests
import json
import pandas as pd
import logging
import psutil
from flask import Flask, render_template, request, jsonify, redirect, url_for
from bs4 import BeautifulSoup
import fitz  # PyMuPDF
from dotenv import load_dotenv
import difflib

# ‚úÖ Naƒçten√≠ environment√°ln√≠ch promƒõnn√Ωch
load_dotenv()
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

# ‚úÖ Konfigurace Flask aplikace
app = Flask(__name__)
app.secret_key = "supersecretkey"

# ‚úÖ Nastaven√≠ logov√°n√≠ (aby se v≈°echny chyby ulo≈æily do Render log≈Ø)
logging.basicConfig(level=logging.DEBUG, filename='app.log', filemode='a', format='%(asctime)s - %(levelname)s - %(message)s')

# ‚úÖ Funkce pro sledov√°n√≠ vyu≈æit√≠ pamƒõti
def get_memory_usage():
    process = psutil.Process(os.getpid())
    mem_info = process.memory_info()
    return mem_info.rss / (1024 * 1024)  # Vr√°t√≠ vyu≈æit√≠ pamƒõti v MB

# ‚úÖ Cesty pro soubory
SOURCES_FILE = "sources.txt"
HISTORY_DIR = "historie_pdfs"

if not os.path.exists(HISTORY_DIR):
    os.makedirs(HISTORY_DIR)

# ‚úÖ Inicializace datab√°ze
columns = ["N√°zev dokumentu", "Kategorie", "Datum vyd√°n√≠ / aktualizace", "Odkaz na zdroj", "Shrnut√≠ obsahu", "Soubor", "Kl√≠ƒçov√° slova", "P≈Øvodn√≠ obsah"]
legislativa_db = pd.DataFrame(columns=columns)

# ‚úÖ Naƒçten√≠ seznamu webov√Ωch zdroj≈Ø
def load_sources():
    if os.path.exists(SOURCES_FILE):
        with open(SOURCES_FILE, "r", encoding="utf-8") as file:
            return [line.strip() for line in file.readlines()]
    return []

# ‚úÖ St√°hneme PDF dokument a extrahujeme text
def extract_text_from_pdf(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            pdf_document = fitz.open(stream=response.content, filetype="pdf")
            return "\n".join([page.get_text("text") for page in pdf_document]).strip()
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi zpracov√°n√≠ PDF: {e}")
    return ""

# ‚úÖ St√°hneme seznam legislativn√≠ch dokument≈Ø z webu
def scrape_legislation(url):
    response = requests.get(url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        data = []
        for link in soup.find_all("a", href=True):
            href = link["href"]
            if href.endswith(".pdf"):
                name = link.text.strip()
                full_url = href if href.startswith("http") else url[:url.rfind("/")+1] + href
                text_content = extract_text_from_pdf(full_url)
                data.append([name, "Legislativa", "N/A", url, "", full_url, "p≈ôedpisy", text_content])
        return pd.DataFrame(data, columns=columns)
    return pd.DataFrame(columns=columns)

# ‚úÖ Naƒçteme legislativn√≠ dokumenty
def load_initial_data():
    global legislativa_db
    urls = load_sources()
    legislativa_db = pd.concat([scrape_legislation(url) for url in urls], ignore_index=True)

load_initial_data()

# ‚úÖ P≈ôid√°n√≠ nov√©ho legislativn√≠ho zdroje
@app.route('/add_source', methods=['POST'])
def add_source():
    new_url = request.form.get("url").strip()
    if new_url:
        with open(SOURCES_FILE, "a", encoding="utf-8") as file:
            file.write(new_url + "\n")
        new_data = scrape_legislation(new_url)
        global legislativa_db
        legislativa_db = pd.concat([legislativa_db, new_data], ignore_index=True)
    return redirect(url_for('index'))

# ‚úÖ AI odpov√≠d√° na z√°kladƒõ dokument≈Ø z konkr√©tn√≠ho webu pomoc√≠ Groq API
def ask_groq(question, source):
    logging.debug(f"üîç Dotaz na AI: {question}")
    logging.debug(f"üìÇ Zdroj: {source}")

    if not GROQ_API_KEY:
        logging.error("‚ùå Chyb√≠ API kl√≠ƒç pro Groq!")
        return "‚ö†Ô∏è Groq API kl√≠ƒç nen√≠ nastaven."

    API_URL = "https://api.groq.com/v1/chat/completions"

    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }

    selected_docs = legislativa_db[legislativa_db["Odkaz na zdroj"] == source]

    if selected_docs.empty:
        logging.warning("‚ö†Ô∏è Nebyly nalezeny ≈æ√°dn√© dokumenty pro tento zdroj.")
        return "‚ö†Ô∏è Nebyly nalezeny ≈æ√°dn√© dokumenty pro tento zdroj."

    extracted_texts = " ".join(selected_docs["P≈Øvodn√≠ obsah"].tolist())

    data = {
        "model": "llama3-8b-8192",
        "messages": [
            {"role": "system", "content": "Jsi AI expert na legislativu."},
            {"role": "user", "content": f"Dokumenty:\n{extracted_texts[:3000]}\n\nOt√°zka: {question}"}
        ],
        "max_tokens": 512
    }

    logging.debug(f"üì° Odes√≠l√°m po≈æadavek na Groq API: {json.dumps(data, indent=2)}")

    try:
        response = requests.post(API_URL, headers=headers, json=data)
        logging.debug(f"üîµ Status Code: {response.status_code}")
        logging.debug(f"üü¢ Odpovƒõƒè Groq API: {response.json()}")

        response_json = response.json()

        if "choices" not in response_json:
            logging.error(f"‚ùå Groq API nevr√°tilo ≈æ√°dnou odpovƒõƒè: {response_json}")
            return "‚ö†Ô∏è Groq nevr√°til odpovƒõƒè."

        return response_json["choices"][0]["message"]["content"]

    except Exception as e:
        logging.error(f"‚õî Chyba p≈ôi vol√°n√≠ Groq API: {e}")
        return f"‚ö†Ô∏è Chyba p≈ôi vol√°n√≠ Groq API: {e}"

# ‚úÖ API pro AI asistenta
@app.route('/ask', methods=['POST'])
def ask():
    question = request.form.get("question", "").strip()
    source = request.form.get("source", "").strip()
    if not question or not source:
        return jsonify({"error": "Zadejte ot√°zku a vyberte zdroj!"})
    return jsonify({"answer": ask_groq(question, source)})

# ‚úÖ Hlavn√≠ webov√° str√°nka
@app.route('/')
def index():
    return render_template('index.html', documents=legislativa_db.to_dict(orient="records"), sources=load_sources())

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=5000, debug=True)
