import os
import pandas as pd
import logging
import time
import asyncio
import re  # ‚úÖ Pro hled√°n√≠ kl√≠ƒçov√Ωch slov v dokumentu
from flask import Flask, render_template, request, jsonify
from bs4 import BeautifulSoup
import fitz
from dotenv import load_dotenv
from groq import Groq

# ‚úÖ Naƒçten√≠ API kl√≠ƒçe
load_dotenv()
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

# ‚úÖ Inicializace klienta Groq
client = Groq(api_key=GROQ_API_KEY)

app = Flask(__name__)
app.secret_key = "supersecretkey"

logging.basicConfig(level=logging.DEBUG, filename='app.log', filemode='a', format='%(asctime)s - %(levelname)s - %(message)s')

def extract_relevant_paragraphs(text, query, max_paragraphs=5):
    """
    Vyhled√° odstavce obsahuj√≠c√≠ kl√≠ƒçov√° slova dotazu.
    Pokud ≈æ√°dn√© nenajde, vr√°t√≠ prvn√≠ 2-3 nejdel≈°√≠ odstavce.
    """
    paragraphs = text.split("\n\n")  # Rozdƒõlen√≠ na odstavce
    keywords = query.lower().split()  # Rozdƒõlen√≠ ot√°zky na jednotliv√° slova

    relevant_paragraphs = [
        para for para in paragraphs if any(word in para.lower() for word in keywords)
    ]

    # Pokud ≈æ√°dn√Ω relevantn√≠ odstavec nenajdeme, vezmeme nejdel≈°√≠ odstavce
    if not relevant_paragraphs:
        relevant_paragraphs = sorted(paragraphs, key=len, reverse=True)[:max_paragraphs]

    return "\n\n".join(relevant_paragraphs[:max_paragraphs])  # Vr√°t√≠me maxim√°lnƒõ `max_paragraphs` odstavc≈Ø

async def ask_groq(question, document):
    """ Po≈°leme dotaz s pouze relevantn√≠mi odstavci. """
    text = document["P≈Øvodn√≠ obsah"]
    
    # ‚úÖ Vyhled√°me pouze relevantn√≠ odstavce
    relevant_text = extract_relevant_paragraphs(text, question)

    # ‚úÖ Kontrola d√©lky token≈Ø p≈ôed odesl√°n√≠m
    token_count = len(relevant_text.split()) + len(question.split())
    print(f"üìä Odes√≠l√°me {token_count} token≈Ø")
    
    if token_count > 1500:
        print("‚ö†Ô∏è Text je st√°le p≈ô√≠li≈° dlouh√Ω, redukujeme ho na 1000 token≈Ø!")
        relevant_text = " ".join(relevant_text.split()[:1000])

    prompt = f"{relevant_text}\n\nOt√°zka: {question}\nOdpovƒõƒè:"

    completion = client.chat.completions.create(
        model="deepseek-r1-distill-qwen-32b",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.6,
        max_tokens=500,  # ‚úÖ Ka≈æd√° odpovƒõƒè max. 500 token≈Ø
        top_p=0.95,
        stream=False
    )

    return completion.choices[0].message.content.strip()

@app.route('/ask', methods=['POST'])
async def ask():
    question = request.form.get("question", "").strip()
    selected_source = request.form.get("source", "").strip()

    if not question:
        return jsonify({"error": "Zadejte ot√°zku!"})
    if not selected_source:
        return jsonify({"error": "Vyberte webovou str√°nku!"})

    selected_docs = [doc for doc in legislativa_db.to_dict(orient="records") if doc["Odkaz na zdroj"] == selected_source]

    if not selected_docs:
        return jsonify({"error": "≈Ω√°dn√© dokumenty nenalezeny pro vybran√Ω zdroj."})

    tasks = [ask_groq(question, doc) for doc in selected_docs]
    answers = await asyncio.gather(*tasks)
    return jsonify({"answer": "\n\n".join(answers)})

if __name__ == '__main__':
    app.run(debug=True)
